
; https://developer.arm.com/documentation/102374/0102/Registers-in-AArch64---general-purpose-registers
.max_stack_size 4000

.data
  :data_label .word 2
  :0          .word 0
  :1          .word 1

  :arr        .word 1 2 3 4 ; array of 4 8-byte integers (1, 2, 3, 4)

.text
  PCA W0 %0 ; syscall 0
  LDR W0 W0
  PCA W2 %0 
  LDR W2 W2
  PCA W3 %1
  LDR W3 W3
  PCA W4 %ins_label    ; use PC-relative offset to go to address to instruction and puts it in W4
  PCA W1 %data_label   ; use PC-relative offset to go to address of .word constant and puts it in W1
  LDR W1 W1            ; load value from address
  :ins_label 
  SUB W1 W1 W3
  EQ  W1 W2            ; check if W1 now equal to W2 (holds 0)
  SYS 
  JMPF W4              ; jump back to :ins_label if last comparison evals to false
  END W1               ; end program with the return integer stored in register W4
    